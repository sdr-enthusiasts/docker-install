version: '3.8'

services:
######################################################################################################################################
# ADS-B/UAT Data Processing Services. These containers read data from dongles and/or other containers and decode or process this data.
# Containers include:
# readsb
# dump978
# mlathub
#
# In order to temporarily suspend a container and prevent it from starting, uncomment this from each container definition:
# #    profiles:
# #      - donotstart

  readsb:
# readsb retrieves 1090MHz Mode A/C/S  data from the SDR(s)
# Note - remove "dump978,37981,raw_in;" from the READSB_NET_CONNECTOR parameter if your station doesn't support UAT.
    image: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf
    tty: true
    container_name: readsb
    hostname: readsb
    restart: always
    labels:
      - "autoheal=true"
    devices:
      - /dev/bus/usb/001/006
    ports:
      - 8080:8080
      - 30002:30002
      - 30003:30003
      - 30005:30005
    environment:
      - TZ=${FEEDER_TZ}
      - READSB_DEVICE_TYPE=rtlsdr
      - READSB_RTLSDR_DEVICE=${ADSB_DONGLE_SERIAL}
      - READSB_RTLSDR_PPM=${ADSB_DONGLE_PPM}
      - READSB_GAIN=${ADSB_DONGLE_GAIN}
      - READSB_DCFILTER=true
      - READSB_FIX=true
      - READSB_LAT=${FEEDER_LAT}
      - READSB_LON=${FEEDER_LONG}
      - READSB_RX_LOCATION_ACCURACY=2
      - READSB_MODEAC=true
      - READSB_STATS_RANGE=true
      - READSB_NET_ENABLE=true
      - READSB_NET_SBS_OUTPUT_PORT=30003
      - READSB_NET_BEAST_OUTPUT_PORT=30005
      - READSB_NET_RAW_OUTPUT_PORT=30002
      - READSB_NET_CONNECTOR=mlathub,30105,beast_in
      - READSB_NET_BEAST_REDUCE_OUT_PORT=30105
      - READSB_GRAPH_MAX_MESSAGES_LINE=1
      - READSB_GRAPH_ALL_LARGE=yes
      - READSB_EXTRA_ARGS=api-port,8080
    volumes:
      - /opt/adsb/readsb/collectd:/run/collectd
      - /opt/adsb/readsb/autogain:/run/autogain
    tmpfs:
      - /run/readsb
      - /var/log
  
      
  mlathub:
# mlathub aggregates the MLAT results from various containers and makes this available to the visualization programs for display
# Note - remove any unused services from the READSB_NET_CONNECTOR parameter
    image: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf
#    profiles:
#      - donotstart
    tty: true
    container_name: mlathub
    hostname: mlathub
    restart: always
    labels:
      - "autoheal=true"
    depends_on:
      - readsb
      - piaware
    #  - adsbx
    #  - rbfeeder
    #  - radarvirtuel
    ports:
      - 30105:30105
    environment:
      - TZ=${FEEDER_TZ}
      - DISABLE_PERFORMANCE_GRAPHS=true
      - DISABLE_WEBAPP=true
      - READSB_NET_ENABLE=true
      - READSB_NET_ONLY=true
      - READSB_FORWARD_MLAT=true
      - READSB_NET_CONNECTOR=piaware,30105,beast_in;rbfeeder,30105,beast_in;radarvirtuel,30105,beast_in;multifeeder,39000,beast_in;multifeeder,39001,beast_in;multifeeder,39002,beast_in
      - READSB_NET_BEAST_OUTPUT_PORT=30105
    tmpfs:
      - /run/readsb


######################################################################################################################################
# ADS-B Feeder Services. These containers feed ADS-B/UAT data to aggregator services.
# Containers include:
# Multifeeder (adsb.fi,adsb.lol,adsb.one and any other of the "new" aggregators)
# piaware (FlightAware)
# fr24 (FlightRadar24)
# planewatch (Plane.Watch)
# ADSBHub (ADSB Hub)

  multifeeder:
  # Multifeeder (adsb.fi,adsb.lol,adsb.one and any other of the "new" aggregators)
    image: ghcr.io/sdr-enthusiasts/docker-multifeeder
#    profiles:
#      - donotstart
    tty: true
    container_name: multifeeder
    hostname: multifeeder
    restart: always
    environment:
      - TZ=${FEEDER_TZ}
      - READSB_NET_CONNECTOR=readsb,30105,beast_in;dump978,30978,raw_in;feed.adsb.fi,30004,beast_out;feed.adsb.one,64004,beast_out;in.adsb.lol,30004,beast_out
      - MLAT_USER=${MLAT_SITE_NAME}
      - MLAT_CONFIG=feed.adsb.fi,31090,39000;feed.adsb.one,64006,39001;in.adsb.lol,31090,39002
      - READSB_LAT=${FEEDER_LAT}
      - READSB_LON=${FEEDER_LONG}
      - READSB_ALT=${FEEDER_ALT_M}m
    tmpfs:
      - /run/readsb
      - /var/log

#  adsbx:
# # adsbx feeds ADS-B (from readsb) and UAT data (from dump978) to ADSBExchange
#     image: ghcr.io/sdr-enthusiasts/docker-adsbexchange
# #    profiles:
# #      - donotstart
#     tty: true
#     container_name: adsbx
#     hostname: adsbc
#     restart: always
#     labels:
#       - "autoheal=true"
#     depends_on:
#       - readsb
#     environment:
#       - BEASTHOST=readsb
#       - LAT=${FEEDER_LAT}
#       - LONG=${FEEDER_LONG}
#       - ALT=${FEEDER_ALT_M}m
#       - SITENAME=${ADSBX_SITENAME}
#       - UUID=${ADSBX_UUID}
#       - TZ=${FEEDER_TZ}
#     tmpfs:
#       - /run:exec,size=64M,uid=1000,gid=1000
#       - /var/log


  piaware:
# piaware feeds ADS-B and UAT data (from readsb) to FlightAware. It also includes a GUI Radar website and a status website   
    image: ghcr.io/sdr-enthusiasts/docker-piaware
#    profiles:
#      - donotstart
    tty: true
    container_name: piaware
    hostname: piaware
    restart: always
    labels:
      - "autoheal=true"
    depends_on:
      - readsb
    ports:
      - 8081:8080
      - 8088:80
    environment:
      - BEASTHOST=readsb
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - TZ=${FEEDER_TZ}
      - FEEDER_ID=${PIAWARE_FEEDER_ID}
    tmpfs:
      - /run:exec,size=64M
      - /var/log


  fr24:
# fr24 feeds ADS-B and UAT data (from readsb) to FlightRadar24. It also includes a status website. Please be careful
# not to expose the status website to the internet as users may be able to start/stop/change the service from there.
# Also note that FR24 has requested NOT to enable MLAT for those station that feed to multiple services; as such, it's commented out.
    image: ghcr.io/sdr-enthusiasts/docker-flightradar24
#    profiles:
#      - donotstart
    tty: true
    container_name: fr24
    hostname: fr24
    restart: always
    labels:
      - "autoheal=true"
    depends_on:
      - readsb
    ports:
      - 8754:8754
    environment:
      - BEASTHOST=readsb
      - TZ=${FEEDER_TZ}
      - FR24KEY=${FR24_SHARING_KEY}
#      - MLAT=yes
    tmpfs:
      - /var/log

      
  planewatch:
# planewatch feeds ADS-B and UAT data (from readsb) to Plane.Watch.
    image: planewatch/plane-watch
#    profiles:
#      - donotstart
    tty: true
    container_name: planewatch
    hostname: planewatch
    restart: always
    depends_on:
      - readsb
    environment:
      - BEASTHOST=readsb
      - TZ=${FEEDER_TZ}
      - API_KEY=${PLANEWATCH_KEY}
      - ACARS_HOST=acars_router
      - VDLM2_HOST=acars_router
      - DEBUG_LOGGING=true
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - ALT=${FEEDER_ALT_FT}ft
    tmpfs:
      - /run:exec,size=64M
      - /var/log
  
  
  adsbhub:
# adsbhub feeds ADS-B and UAT data (from readsb) to ADSB Hub.
    image: ghcr.io/sdr-enthusiasts/docker-adsbhub
#    profiles:
#      - donotstart
    tty: true
    container_name: adsbhub
    restart: always
    environment:
      - TZ=${FEEDER_TZ}
      - SBSHOST=readsb
      - CLIENTKEY=${ADSBHUB_STATION_KEY}  


######################################################################################################################################
# ADS-B Visualization Services. These containers create pretty web pages from ADSB/UAT data that your station receives.
# Containers include:
# tar1090 (most people's preferred "radar" application
# planefence (monitor planes nearby your station and planes from a "special" watchlist)
# screenshot (auxilary container used with planefence -- only runs well on Pi4)
 
  tar1090:
    image: ghcr.io/sdr-enthusiasts/docker-tar1090
#    profiles:
#      - donotstart
    tty: true
    container_name: tar1090
    hostname: tar1090
    restart: always
    depends_on:
      - readsb
    labels:
      - "autoheal=true"
    environment:
      - UPDATE_TAR1090=true
      - TZ=${FEEDER_TZ}
      - BEASTHOST=readsb
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - TAR1090_DEFAULTCENTERLAT=${FEEDER_LAT}
      - TAR1090_DEFAULTCENTERLON=${FEEDER_LONG}
      - TAR1090_SITESHOW=true
      #- HEYWHATSTHAT_PANORAMA_ID=${HEYWHATSTHAT}
      - ENABLE_TIMELAPSE1090=true
      #- MLATHOST=mlathub
      - TAR1090_ENABLE_AC_DB=true
      #- TAR1090_FLIGHTAWARELINKS=true
    ports:
      - 8082:80
    volumes:
      - "/opt/adsb/tar1090/heatmap:/var/globe_history"
      - "/opt/adsb/tar1090/timelapse:/var/timelapse1090"
    tmpfs:
      - /run:exec,size=64M
      - /var/log


######################################################################################################################################
# Finally, a few "maintenance" containers that keep the rest of the stack healthy and up to date:
# vnstat: shows network usage on a per interface (global and per container) basis
# autoheal: restarts containers when they are deemed "unhealthy"
# watchtower: checks every 24 hours for new versions of the containers, and downloads/installs/starts them

  vnstat:
    image: vergoh/vnstat
    container_name: vnstat
    restart: unless-stopped
    network_mode: "host"
    ports:
       - 8685:8685
    volumes:
       - /etc/localtime:/etc/localtime:ro
       - /etc/timezone:/etc/timezone:ro
       - /opt/adsb/vnstat:/var/lib/vnstat
    environment:
       - HTTP_PORT=8685
       - HTTP_BIND=*
       - HTTP_LOG=/dev/stdout
       - LARGE_FONTS=1
       - CACHE_TIME=1
       - RATE_UNIT=0
       - PAGE_REFRESH=0
       - SERVER_NAME="ADSB Station IO Stats"     
      
  autoheal:
    image: willfarrell/autoheal
    tty: true
    container_name: autoheal
    hostname: autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  
  watchtower:
    image: containrrr/watchtower
    tty: true
    container_name: watchtower
    hostname: watchtower
    restart: always
    environment:
      - TZ=${FEEDER_TZ}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400
      - WATCHTOWER_ROLLING_RESTART=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
